<?xml version="1.0"?>
  <database name="FUNCTION OEZ_IMPORTPRODUCTCOST">
    <function name="OEZ_IMPORTPRODUCTCOST" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[--generate product value list that have suspect of duplicity
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_count integer:=0;
  v_Record_ID VARCHAR(32);
  v_AD_User_ID VARCHAR(32);
  v_AD_Client_ID VARCHAR(32);
  v_AD_Org_ID VARCHAR(32);
  v_inout_id VARCHAR(32);

  v_productcost_id VARCHAR(32);
  v_productcost2_id VARCHAR(32);
  v_costtype VARCHAR(20);
  cur_productcost RECORD;
  v_datefrom timestamp without time zone;

  
  --  Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
 
  BEGIN
   DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY

    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_AD_User_ID:=Cur_Parameter.AD_User_ID;
    END LOOP;

    select ad_client_id, ad_org_id into v_ad_client_id, v_ad_org_id from oez_i_productcost
      where oez_i_productcost_id=v_Record_ID;
    -- Get Parameter

    --update product
    update oez_i_productcost
     set m_product_id=(select m_product_id from m_product where value=oez_i_productcost.value and ad_client_id=v_ad_client_id)
    where ad_client_id=v_ad_client_id;

    --loop for import product price
    for cur_productcost in (select * from oez_i_productcost where ad_client_id=v_ad_client_id
				and m_product_id is not null
				and datefrom is not null
				and dateto is not null
				and cost is not null
				and m_costing_id is null
				and processed='N')
    loop --start loop for import product price

      --get uuid for product price
      select m_costing_id into v_productcost_id from m_costing
        where m_product_id=cur_productcost.m_product_id
        and ad_org_id=cur_productcost.ad_org_id
        and datefrom=cur_productcost.datefrom
        and dateto=cur_productcost.dateto;

      --update dateto if any subsequence costing record
      select m_costing_id, datefrom into v_productcost2_id, v_datefrom from m_costing
        where m_product_id=cur_productcost.m_product_id
        and ad_org_id=cur_productcost.ad_org_id
        and cur_productcost.datefrom<datefrom
        order by datefrom asc limit 1;
      if v_productcost2_id is not null then
        cur_productcost.dateto:=v_datefrom-'1 Day'::interval;
      end if;      
      select m_costing_id, datefrom into v_productcost2_id, v_datefrom from m_costing
        where m_product_id=cur_productcost.m_product_id
        and ad_org_id=cur_productcost.ad_org_id
        and cur_productcost.datefrom>datefrom
        order by datefrom desc limit 1;        
      if v_productcost2_id is not null then
        update m_costing
          set dateto=cur_productcost.datefrom-'1 Day'::interval
        where m_costing_id=v_productcost2_id;
      end if;

      --get costtype
      select costtype into v_costtype from m_product where m_product_id=cur_productcost.m_product_id;
      if v_costtype is null then
        v_costtype='AVA'; --default costtype is Average
        update m_product
         set costtype='AVA'
        where m_product_id=cur_productcost.m_product_id; --updating costtype
      end if; 

      --insert product cost
      if v_productcost_id is null then
	      v_productcost_id:=get_uuid();
	      INSERT INTO m_costing(
		    m_costing_id, created, createdby, updated, updatedby, ad_client_id, 
		    ad_org_id, m_product_id, datefrom, dateto, ismanual, m_inoutline_id, 
		    c_invoiceline_id, qty, price, cumqty, costtype, ispermanent, 
		    "cost", m_productionline_id, isproduction, isactive)
		    VALUES (v_productcost_id, now(), v_ad_user_id, now(), v_ad_user_id, cur_productcost.ad_client_id, 
			    cur_productcost.ad_org_id, cur_productcost.m_product_id, cur_productcost.datefrom, cur_productcost.dateto, 'N', null, 
			    null, null, null, null, v_costtype, 'N', 
			    cur_productcost.cost, null, 'N', 'Y');
      else
        update m_costing
        set
          "cost"=cur_productcost.cost
	where m_costing_id=v_productcost_id;
      end if;

      --update product price record
      update oez_i_productcost
        set m_costing_ID=v_productcost_id,
        Processed='Y'
      where oez_i_productcost_ID=cur_productcost.oez_i_productcost_ID;

      --reset v_productcost_id to null
      v_productcost_id:=null;
    end loop; --end loop for import product price
    
    

    IF(p_PInstance_ID IS NOT NULL) THEN
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Finished ' || v_Message) ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  IF(p_PInstance_ID IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
END OEZ_IMPORTPRODUCTCOST
]]></body>
    </function>
  </database>
