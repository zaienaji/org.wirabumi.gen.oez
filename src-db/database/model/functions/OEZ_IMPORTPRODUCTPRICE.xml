<?xml version="1.0"?>
  <database name="FUNCTION OEZ_IMPORTPRODUCTPRICE">
    <function name="OEZ_IMPORTPRODUCTPRICE" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[--generate product value list that have suspect of duplicity
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_count integer:=0;
  v_Record_ID VARCHAR(32);
  v_AD_User_ID VARCHAR(32);
  v_AD_Client_ID VARCHAR(32);
  v_AD_Org_ID VARCHAR(32);
  v_inout_id VARCHAR(32);

  v_productprice_id VARCHAR(32);
  cur_productprice RECORD;

  
  --  Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
 
  BEGIN
   DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY

    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_AD_User_ID:=Cur_Parameter.AD_User_ID;
    END LOOP;

    select ad_client_id, ad_org_id into v_ad_client_id, v_ad_org_id from oez_i_productprice
      where oez_i_productprice_id=v_Record_ID;
    -- Get Parameter

    --update product
    update oez_i_productprice
     set m_product_id=(select m_product_id from m_product where value=oez_i_productprice.value and ad_client_id=v_ad_client_id)
    where ad_client_id=v_ad_client_id;

    

    --loop for import product price
    for cur_productprice in (select * from oez_i_productprice where ad_client_id=v_ad_client_id
				and m_product_id is not null
				and pricestd is not null
				and pricelist is not null
				and pricelimit is not null
				and m_productprice_id is null
				and processed='N')
    loop --start loop for import product price

      --update pricelist version name
      cur_productprice.M_Pricelist_Version_ID:=(select M_Pricelist_Version_ID from M_Pricelist_Version where name=cur_productprice.pricelistversionname
					and ad_client_id=v_ad_client_id
					order by updated desc
					limit 1);
      update oez_i_productprice
        set M_Pricelist_Version_ID=cur_productprice.M_Pricelist_Version_ID
      where oez_i_productprice_id=cur_productprice.oez_i_productprice_id;
      
      if cur_productprice.M_Pricelist_Version_ID is null then continue; end if;

      --get uuid for product price
      select m_productprice_id into v_productprice_id from m_productprice
        where M_Pricelist_Version_ID=cur_productprice.M_Pricelist_Version_ID
        and m_product_id=cur_productprice.m_product_id;

      if cur_productprice.m_product_id is not null and cur_productprice.M_Pricelist_Version_ID is not null then
	      if v_productprice_id is null then
	      
		v_productprice_id:=get_uuid(); 
		--insert product price
		INSERT INTO m_productprice(
		    m_productprice_id, m_pricelist_version_id, m_product_id, ad_client_id, 
		    ad_org_id, isactive, created, createdby, updated, updatedby, 
		    pricelist, pricestd, pricelimit)
		    VALUES (v_productprice_id, cur_productprice.M_Pricelist_Version_ID, cur_productprice.m_product_id, cur_productprice.ad_client_id, 
			    cur_productprice.ad_org_id, 'Y', now(), v_ad_user_id, now(), v_ad_user_id, 
			    cur_productprice.pricelist, cur_productprice.pricestd, cur_productprice.pricelimit);
	      else
		--update existing price
		UPDATE m_productprice
			set pricelist=cur_productprice.pricelist,
			pricestd=cur_productprice.pricestd,
			pricelimit=cur_productprice.pricelimit
		where m_productprice_id=v_productprice_id;
	      end if;

	      --update product price record
	      update oez_i_productprice
		set M_Productprice_ID=v_productprice_id,
		Processed='Y'
	      where OEZ_I_Productprice_ID=cur_productprice.OEZ_I_Productprice_ID;

      end if;
     
    end loop; --end loop for import product price
    
    

    IF(p_PInstance_ID IS NOT NULL) THEN
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Finished ' || v_Message) ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  IF(p_PInstance_ID IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
END OEZ_IMPORTPRODUCTPRICE
]]></body>
    </function>
  </database>
